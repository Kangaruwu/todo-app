basePath: /api/v1
definitions:
  models.ErrorResponse:
    properties:
      error:
        example: Invalid request
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.RecoverPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword123
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RegisterResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      success:
        example: true
        type: boolean
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      new_password:
        example: newsecurepassword123
        minLength: 8
        type: string
      token:
        example: recovery_token_123
        type: string
    required:
    - new_password
    - token
    type: object
  models.SuccessResponse:
    properties:
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: https://www.youtube.com/watch?v=KsB99Sf_fX0
    name: API Support
    url: https://www.youtube.com/watch?v=KsB99Sf_fX0
  description: This is a sample Todo API server built with Go Fiber
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Backend Todo API
  version: "1.0"
paths:
  /auth/confirm-email/{token}:
    get:
      consumes:
      - application/json
      description: Confirm user email with verification token
      parameters:
      - description: Email confirmation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Confirm email address
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/recover-password:
    post:
      consumes:
      - application/json
      description: Send password recovery email
      parameters:
      - description: Recovery email data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RecoverPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Password recovery
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User registration
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with recovery token
      parameters:
      - description: Password reset data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password
      tags:
      - auth
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
